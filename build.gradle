/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */
import org.apache.tools.ant.taskdefs.condition.Os

// Apply the plugin 
plugins {
	id "de.undercouch.download" version "3.1.2"
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

// In this section you declare where to find the dependencies of your project
repositories {
	jcenter()
	mavenCentral()
	mavenLocal()
}

ext.junitVersion = '4.12'
ext.seleniumVersion = '3.4.0'
ext.cucumberVersion = '1.2.5'

dependencies {
	testCompile group: 'junit', name: 'junit', version:junitVersion
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version:seleniumVersion
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-api', version:seleniumVersion
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:seleniumVersion
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version:seleniumVersion
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-support', version:seleniumVersion
	testCompile group: 'info.cukes', name: 'cucumber-java', version:cucumberVersion
	testCompile group: 'info.cukes', name: 'cucumber-junit', version:cucumberVersion	
}

task setupCucumberTestWithGoogleChrome {
    description 'Create the Functional Tests properties and Chrome Driver, for Functional Test with BDD flow, but only work if run on project root folder.'

	doLast {
		def SeleniumPropertyKeysPath = new File( 'SeleniumDriver' )
		
		if ( (Os.isFamily(Os.FAMILY_WINDOWS)) && (!new File( '/SeleniumDriver/chromedriver.exe').exists()) ) {
			println "Create Configuration for Windows to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.42/chromedriver_win32.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_win32.zip')
			}

			copy {
				def DriverPath = new File ('/SeleniumDriver/')
				from zipTree('/SeleniumDriver/chromedriver_win32.zip')
				into "SeleniumDriver/"
			}
			delete 'SeleniumDriver/chromedriver_win32.zip'

		} else if ( (Os.isFamily(Os.FAMILY_MAC)) && (!new File( '/SeleniumDriver/chromedriver').exists()) ) {
			println "Create Configuration for Mac to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.42/chromedriver_mac64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_mac64.zip')
			}
            
			copy {
				def DriverPath = new File ('/SeleniumDriver/')
				from zipTree('SeleniumDriver/chromedriver_mac64.zip')
				into "SeleniumDriver/"
			}
			delete 'SeleniumDriver/chromedriver_mac64.zip'

		} else if ( (Os.isFamily(Os.FAMILY_UNIX)) && (!new File( '/SeleniumDriver/chromedriver').exists()) ) {
			println "Create Configuration for Unix to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.42/chromedriver_linux64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_linux64.zip')
			}

			copy {
				from zipTree(new File('SeleniumDriver/', 'chromedriver_linux64.zip'))
				into "SeleniumDriver/"
			}
			delete 'SeleniumDriver/chromedriver_linux64.zip'
		  } else {
			println "You already had the local Google Chrome Driver created"
		}
	}
}